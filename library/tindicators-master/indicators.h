/* Generated by codegen.py */
#pragma once

#define TI_VERSION "0.9.12"
#define TI_BUILD 1685696801

#include <math.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN32
    #ifdef BUILDING
        #define DLLEXPORT __declspec(dllexport)
    #else
        #define DLLEXPORT __declspec(dllimport)
    #endif
#else
    #define DLLEXPORT
#endif

#ifdef _MSC_VER
    #define DONTOPTIMIZE /* __pragma(optimize("", off)) */
#elif __clang__
    #define DONTOPTIMIZE [[clang::optnone]]
#elif __GNUC__
    #define DONTOPTIMIZE __attribute__((optimize("O0")))
#endif

DLLEXPORT extern const char* ti_version();
DLLEXPORT extern long int ti_build();
DLLEXPORT extern int ti_indicator_count();

typedef double TI_REAL;
enum {TI_OKAY, TI_INVALID_OPTION, TI_OUT_OF_MEMORY};
enum {TI_TYPE_OVERLAY=1, TI_TYPE_INDICATOR, TI_TYPE_MATH, TI_TYPE_SIMPLE, TI_TYPE_COMPARATIVE};
#define TI_MAXINDPARAMS 10 /* No indicator will use more than this many inputs, options, or outputs. */

struct ti_stream { int index; int progress; }; typedef struct ti_stream ti_stream;
typedef int (*ti_indicator_start_function)(TI_REAL const *options);
typedef int (*ti_indicator_function)(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
typedef int (*ti_indicator_stream_new)(TI_REAL const *options, ti_stream **stream);
typedef int (*ti_indicator_stream_run)(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
typedef void (*ti_indicator_stream_free)(ti_stream *stream);

typedef struct ti_indicator_info {
    char *name;
    char *full_name;
    ti_indicator_start_function start;
    ti_indicator_function indicator;
    ti_indicator_function indicator_ref;
    int type, inputs, options, outputs;
    char *input_names[TI_MAXINDPARAMS];
    char *option_names[TI_MAXINDPARAMS];
    char *output_names[TI_MAXINDPARAMS];
    ti_indicator_stream_new stream_new;
    ti_indicator_stream_run stream_run;
    ti_indicator_stream_free stream_free;
} ti_indicator_info;

#define TI_INDICATOR_COUNT 161
DLLEXPORT extern ti_indicator_info ti_indicators[];
DLLEXPORT extern const ti_indicator_info *ti_find_indicator(const char *name);

DLLEXPORT extern int ti_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern ti_indicator_info *ti_stream_get_info(ti_stream *stream);
DLLEXPORT extern int ti_stream_get_progress(ti_stream *stream);
DLLEXPORT extern void ti_stream_free(ti_stream *stream);
/* dema */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [dema] */
DLLEXPORT extern int ti_dema_start(TI_REAL const *options);
DLLEXPORT extern int ti_dema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ema */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [ema] */
DLLEXPORT extern int ti_ema_start(TI_REAL const *options);
DLLEXPORT extern int ti_ema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* hfsma */
/* Type: overlay */
/* Input arrays: 1    Options: 3    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [sma_period, k, threshold] */
/* Outputs: [hfsma] */
DLLEXPORT extern int ti_hfsma_start(TI_REAL const *options);
DLLEXPORT extern int ti_hfsma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hfsma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hfsma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hfsma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hfsma_stream_free(ti_stream *stream);

/* hma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [hma] */
DLLEXPORT extern int ti_hma_start(TI_REAL const *options);
DLLEXPORT extern int ti_hma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* hfema */
/* Type: overlay */
/* Input arrays: 1    Options: 3    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [ema_period, k, threshold] */
/* Outputs: [hfema] */
DLLEXPORT extern int ti_hfema_start(TI_REAL const *options);
DLLEXPORT extern int ti_hfema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hfema_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hfema_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hfema_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hfema_stream_free(ti_stream *stream);

/* sma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [sma] */
DLLEXPORT extern int ti_sma_start(TI_REAL const *options);
DLLEXPORT extern int ti_sma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_sma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_sma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_sma_stream_free(ti_stream *stream);

/* lf */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [gamma] */
/* Outputs: [lf] */
DLLEXPORT extern int ti_lf_start(TI_REAL const *options);
DLLEXPORT extern int ti_lf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_lf_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_lf_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_lf_stream_free(ti_stream *stream);

/* rmf */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [critical_period, median_period] */
/* Outputs: [rmf] */
DLLEXPORT extern int ti_rmf_start(TI_REAL const *options);
DLLEXPORT extern int ti_rmf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_rmf_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_rmf_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_rmf_stream_free(ti_stream *stream);

/* mama */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 2 */
/* Inputs: [series] */
/* Options: [fastlimit, slowlimit] */
/* Outputs: [mama, fama] */
DLLEXPORT extern int ti_mama_start(TI_REAL const *options);
DLLEXPORT extern int ti_mama(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mama_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mama_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_mama_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_mama_stream_free(ti_stream *stream);

/* rema */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, lambda] */
/* Outputs: [rema] */
DLLEXPORT extern int ti_rema_start(TI_REAL const *options);
DLLEXPORT extern int ti_rema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_rema_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_rema_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_rema_stream_free(ti_stream *stream);

/* tema */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [tema] */
DLLEXPORT extern int ti_tema_start(TI_REAL const *options);
DLLEXPORT extern int ti_tema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* trima */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [trima] */
DLLEXPORT extern int ti_trima_start(TI_REAL const *options);
DLLEXPORT extern int ti_trima(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vidya */
/* Type: overlay */
/* Input arrays: 1    Options: 3    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [short period, long period, alpha] */
/* Outputs: [vidya] */
DLLEXPORT extern int ti_vidya_start(TI_REAL const *options);
DLLEXPORT extern int ti_vidya(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vwma */
/* Type: overlay */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: [period] */
/* Outputs: [vwma] */
DLLEXPORT extern int ti_vwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_vwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vwap */
/* Type: overlay */
/* Input arrays: 4    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: [period] */
/* Outputs: [vwap] */
DLLEXPORT extern int ti_vwap_start(TI_REAL const *options);
DLLEXPORT extern int ti_vwap(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_vwap_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_vwap_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_vwap_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_vwap_stream_free(ti_stream *stream);

/* wilders */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [wilders] */
DLLEXPORT extern int ti_wilders_start(TI_REAL const *options);
DLLEXPORT extern int ti_wilders(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* wma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [wma] */
DLLEXPORT extern int ti_wma_start(TI_REAL const *options);
DLLEXPORT extern int ti_wma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* zlema */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [zlema] */
DLLEXPORT extern int ti_zlema_start(TI_REAL const *options);
DLLEXPORT extern int ti_zlema(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* rmta */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, beta] */
/* Outputs: [rmta] */
DLLEXPORT extern int ti_rmta_start(TI_REAL const *options);
DLLEXPORT extern int ti_rmta(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* gf1 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [gf1] */
DLLEXPORT extern int ti_gf1_start(TI_REAL const *options);
DLLEXPORT extern int ti_gf1(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf1_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf1_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_gf1_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_gf1_stream_free(ti_stream *stream);

/* gf2 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [gf2] */
DLLEXPORT extern int ti_gf2_start(TI_REAL const *options);
DLLEXPORT extern int ti_gf2(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf2_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf2_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_gf2_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_gf2_stream_free(ti_stream *stream);

/* gf3 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [gf3] */
DLLEXPORT extern int ti_gf3_start(TI_REAL const *options);
DLLEXPORT extern int ti_gf3(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf3_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf3_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_gf3_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_gf3_stream_free(ti_stream *stream);

/* gf4 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [gf4] */
DLLEXPORT extern int ti_gf4_start(TI_REAL const *options);
DLLEXPORT extern int ti_gf4(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf4_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_gf4_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_gf4_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_gf4_stream_free(ti_stream *stream);

/* ehma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [ehma] */
DLLEXPORT extern int ti_ehma_start(TI_REAL const *options);
DLLEXPORT extern int ti_ehma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ehma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ehma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_ehma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_ehma_stream_free(ti_stream *stream);

/* evwma */
/* Type: overlay */
/* Input arrays: 2    Options: 2    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: [period, gamma] */
/* Outputs: [evwma] */
DLLEXPORT extern int ti_evwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_evwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_evwma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_evwma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_evwma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_evwma_stream_free(ti_stream *stream);

/* lma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [close] */
/* Options: [period] */
/* Outputs: [lma] */
DLLEXPORT extern int ti_lma_start(TI_REAL const *options);
DLLEXPORT extern int ti_lma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_lma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_lma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_lma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_lma_stream_free(ti_stream *stream);

/* pwma */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, power] */
/* Outputs: [pwma] */
DLLEXPORT extern int ti_pwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_pwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pwma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pwma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_pwma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_pwma_stream_free(ti_stream *stream);

/* swma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [swma] */
DLLEXPORT extern int ti_swma_start(TI_REAL const *options);
DLLEXPORT extern int ti_swma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_swma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_swma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_swma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_swma_stream_free(ti_stream *stream);

/* dwma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [dwma] */
DLLEXPORT extern int ti_dwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_dwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_dwma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_dwma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_dwma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_dwma_stream_free(ti_stream *stream);

/* shmma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [shmma] */
DLLEXPORT extern int ti_shmma_start(TI_REAL const *options);
DLLEXPORT extern int ti_shmma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_shmma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_shmma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_shmma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_shmma_stream_free(ti_stream *stream);

/* ahma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [ahma] */
DLLEXPORT extern int ti_ahma_start(TI_REAL const *options);
DLLEXPORT extern int ti_ahma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ahma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ahma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_ahma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_ahma_stream_free(ti_stream *stream);

/* t3 */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, v] */
/* Outputs: [t3] */
DLLEXPORT extern int ti_t3_start(TI_REAL const *options);
DLLEXPORT extern int ti_t3(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_t3_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_t3_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_t3_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_t3_stream_free(ti_stream *stream);

/* mhlma */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 2 */
/* Inputs: [series] */
/* Options: [period, ma_period] */
/* Outputs: [mhlsma, mhlema] */
DLLEXPORT extern int ti_mhlma_start(TI_REAL const *options);
DLLEXPORT extern int ti_mhlma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mhlma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mhlma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_mhlma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_mhlma_stream_free(ti_stream *stream);

/* cmi */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [cmi] */
DLLEXPORT extern int ti_cmi_start(TI_REAL const *options);
DLLEXPORT extern int ti_cmi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_cmi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_cmi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_cmi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_cmi_stream_free(ti_stream *stream);

/* idwma */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, exponent] */
/* Outputs: [idwma] */
DLLEXPORT extern int ti_idwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_idwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_idwma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_idwma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_idwma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_idwma_stream_free(ti_stream *stream);

/* emsd */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, ma_period] */
/* Outputs: [emsd] */
DLLEXPORT extern int ti_emsd_start(TI_REAL const *options);
DLLEXPORT extern int ti_emsd(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_emsd_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_emsd_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_emsd_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_emsd_stream_free(ti_stream *stream);

/* hwma */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [hwma] */
DLLEXPORT extern int ti_hwma_start(TI_REAL const *options);
DLLEXPORT extern int ti_hwma(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hwma_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hwma_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hwma_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hwma_stream_free(ti_stream *stream);

/* hd */
/* Type: indicator */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [hd] */
DLLEXPORT extern int ti_hd_start(TI_REAL const *options);
DLLEXPORT extern int ti_hd(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hd_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hd_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hd_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hd_stream_free(ti_stream *stream);

/* mgdyn */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [N] */
/* Outputs: [mgdyn] */
DLLEXPORT extern int ti_mgdyn_start(TI_REAL const *options);
DLLEXPORT extern int ti_mgdyn(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mgdyn_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mgdyn_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_mgdyn_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_mgdyn_stream_free(ti_stream *stream);

/* linreg */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [linreg] */
DLLEXPORT extern int ti_linreg_start(TI_REAL const *options);
DLLEXPORT extern int ti_linreg(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* linregintercept */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [linregintercept] */
DLLEXPORT extern int ti_linregintercept_start(TI_REAL const *options);
DLLEXPORT extern int ti_linregintercept(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* linregslope */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [linregslope] */
DLLEXPORT extern int ti_linregslope_start(TI_REAL const *options);
DLLEXPORT extern int ti_linregslope(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* tsf */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [tsf] */
DLLEXPORT extern int ti_tsf_start(TI_REAL const *options);
DLLEXPORT extern int ti_tsf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* fosc */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [fosc] */
DLLEXPORT extern int ti_fosc_start(TI_REAL const *options);
DLLEXPORT extern int ti_fosc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* bbands */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 3 */
/* Inputs: [series] */
/* Options: [period, stddev] */
/* Outputs: [bbands_lower, bbands_middle, bbands_upper] */
DLLEXPORT extern int ti_bbands_start(TI_REAL const *options);
DLLEXPORT extern int ti_bbands(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* bf2 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [bf2] */
DLLEXPORT extern int ti_bf2_start(TI_REAL const *options);
DLLEXPORT extern int ti_bf2(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_bf2_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_bf2_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_bf2_stream_free(ti_stream *stream);

/* bf3 */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [bf3] */
DLLEXPORT extern int ti_bf3_start(TI_REAL const *options);
DLLEXPORT extern int ti_bf3(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_bf3_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_bf3_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_bf3_stream_free(ti_stream *stream);

/* kc */
/* Type: overlay */
/* Input arrays: 3    Options: 2    Output arrays: 3 */
/* Inputs: [high, low, close] */
/* Options: [period, multiple] */
/* Outputs: [kc_lower, kc_middle, kc_upper] */
DLLEXPORT extern int ti_kc_start(TI_REAL const *options);
DLLEXPORT extern int ti_kc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_kc_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_kc_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_kc_stream_free(ti_stream *stream);

/* kama */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [kama] */
DLLEXPORT extern int ti_kama_start(TI_REAL const *options);
DLLEXPORT extern int ti_kama(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* psar */
/* Type: overlay */
/* Input arrays: 2    Options: 2    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [acceleration factor step, acceleration factor maximum] */
/* Outputs: [psar] */
DLLEXPORT extern int ti_psar_start(TI_REAL const *options);
DLLEXPORT extern int ti_psar(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* pc */
/* Type: overlay */
/* Input arrays: 2    Options: 1    Output arrays: 2 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [pc_low, pc_high] */
DLLEXPORT extern int ti_pc_start(TI_REAL const *options);
DLLEXPORT extern int ti_pc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pc_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_pc_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_pc_stream_free(ti_stream *stream);

/* pbands */
/* Type: overlay */
/* Input arrays: 3    Options: 1    Output arrays: 2 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [pbands_lower, pbands_upper] */
DLLEXPORT extern int ti_pbands_start(TI_REAL const *options);
DLLEXPORT extern int ti_pbands(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pbands_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pbands_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_pbands_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_pbands_stream_free(ti_stream *stream);

/* edcf */
/* Type: overlay */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [length] */
/* Outputs: [edcf] */
DLLEXPORT extern int ti_edcf_start(TI_REAL const *options);
DLLEXPORT extern int ti_edcf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_edcf_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_edcf_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_edcf_stream_free(ti_stream *stream);

/* frama */
/* Type: overlay */
/* Input arrays: 2    Options: 2    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period, average_period] */
/* Outputs: [frama] */
DLLEXPORT extern int ti_frama_start(TI_REAL const *options);
DLLEXPORT extern int ti_frama(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_frama_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_frama_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_frama_stream_free(ti_stream *stream);

/* roof */
/* Type: overlay */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [roof] */
DLLEXPORT extern int ti_roof_start(TI_REAL const *options);
DLLEXPORT extern int ti_roof(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_roof_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_roof_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_roof_stream_free(ti_stream *stream);

/* ssmooth */
/* Type: overlay */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [ssmooth] */
DLLEXPORT extern int ti_ssmooth_start(TI_REAL const *options);
DLLEXPORT extern int ti_ssmooth(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ssmooth_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_ssmooth_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_ssmooth_stream_free(ti_stream *stream);

/* hf */
/* Type: overlay */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, threshold] */
/* Outputs: [hf] */
DLLEXPORT extern int ti_hf_start(TI_REAL const *options);
DLLEXPORT extern int ti_hf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hf_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hf_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hf_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hf_stream_free(ti_stream *stream);

/* ad */
/* Type: indicator */
/* Input arrays: 4    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: none */
/* Outputs: [ad] */
DLLEXPORT extern int ti_ad_start(TI_REAL const *options);
DLLEXPORT extern int ti_ad(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* adosc */
/* Type: indicator */
/* Input arrays: 4    Options: 2    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: [short period, long period] */
/* Outputs: [adosc] */
DLLEXPORT extern int ti_adosc_start(TI_REAL const *options);
DLLEXPORT extern int ti_adosc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* abands */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 3 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [abands_lower, abands_upper, abands_middle] */
DLLEXPORT extern int ti_abands_start(TI_REAL const *options);
DLLEXPORT extern int ti_abands(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_abands_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* apo */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [short period, long period] */
/* Outputs: [apo] */
DLLEXPORT extern int ti_apo_start(TI_REAL const *options);
DLLEXPORT extern int ti_apo(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* aroon */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 2 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [aroon_down, aroon_up] */
DLLEXPORT extern int ti_aroon_start(TI_REAL const *options);
DLLEXPORT extern int ti_aroon(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* aroonosc */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [aroonosc] */
DLLEXPORT extern int ti_aroonosc_start(TI_REAL const *options);
DLLEXPORT extern int ti_aroonosc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ao */
/* Type: indicator */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: none */
/* Outputs: [ao] */
DLLEXPORT extern int ti_ao_start(TI_REAL const *options);
DLLEXPORT extern int ti_ao(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* bop */
/* Type: indicator */
/* Input arrays: 4    Options: 0    Output arrays: 1 */
/* Inputs: [open, high, low, close] */
/* Options: none */
/* Outputs: [bop] */
DLLEXPORT extern int ti_bop_start(TI_REAL const *options);
DLLEXPORT extern int ti_bop(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* cmf */
/* Type: indicator */
/* Input arrays: 4    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: [period] */
/* Outputs: [cmf] */
DLLEXPORT extern int ti_cmf_start(TI_REAL const *options);
DLLEXPORT extern int ti_cmf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* mesastoch */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, max_cycle_considered] */
/* Outputs: [mesastoch] */
DLLEXPORT extern int ti_mesastoch_start(TI_REAL const *options);
DLLEXPORT extern int ti_mesastoch(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mesastoch_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_mesastoch_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_mesastoch_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_mesastoch_stream_free(ti_stream *stream);

/* cmo */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [cmo] */
DLLEXPORT extern int ti_cmo_start(TI_REAL const *options);
DLLEXPORT extern int ti_cmo(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* cci */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [cci] */
DLLEXPORT extern int ti_cci_start(TI_REAL const *options);
DLLEXPORT extern int ti_cci(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* copp */
/* Type: indicator */
/* Input arrays: 1    Options: 3    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [roc_shorter_period, roc_longer_period, wma_period] */
/* Outputs: [copp] */
DLLEXPORT extern int ti_copp_start(TI_REAL const *options);
DLLEXPORT extern int ti_copp(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_copp_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_copp_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_copp_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_copp_stream_free(ti_stream *stream);

/* dpo */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [dpo] */
DLLEXPORT extern int ti_dpo_start(TI_REAL const *options);
DLLEXPORT extern int ti_dpo(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* emv */
/* Type: indicator */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, volume] */
/* Options: none */
/* Outputs: [emv] */
DLLEXPORT extern int ti_emv_start(TI_REAL const *options);
DLLEXPORT extern int ti_emv(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* fisher */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 2 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [fisher, fisher_signal] */
DLLEXPORT extern int ti_fisher_start(TI_REAL const *options);
DLLEXPORT extern int ti_fisher(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* fi */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: [period] */
/* Outputs: [fi] */
DLLEXPORT extern int ti_fi_start(TI_REAL const *options);
DLLEXPORT extern int ti_fi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_fi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_fi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_fi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_fi_stream_free(ti_stream *stream);

/* kvo */
/* Type: indicator */
/* Input arrays: 4    Options: 2    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: [short period, long period] */
/* Outputs: [kvo] */
DLLEXPORT extern int ti_kvo_start(TI_REAL const *options);
DLLEXPORT extern int ti_kvo(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* kst */
/* Type: indicator */
/* Input arrays: 1    Options: 8    Output arrays: 2 */
/* Inputs: [series] */
/* Options: [roc1, roc2, roc3, roc4, ma1, ma2, ma3, ma4] */
/* Outputs: [kst, kst_signal] */
DLLEXPORT extern int ti_kst_start(TI_REAL const *options);
DLLEXPORT extern int ti_kst(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_kst_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* marketfi */
/* Type: indicator */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, volume] */
/* Options: none */
/* Outputs: [marketfi] */
DLLEXPORT extern int ti_marketfi_start(TI_REAL const *options);
DLLEXPORT extern int ti_marketfi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* mass */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [mass] */
DLLEXPORT extern int ti_mass_start(TI_REAL const *options);
DLLEXPORT extern int ti_mass(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* mfi */
/* Type: indicator */
/* Input arrays: 4    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close, volume] */
/* Options: [period] */
/* Outputs: [mfi] */
DLLEXPORT extern int ti_mfi_start(TI_REAL const *options);
DLLEXPORT extern int ti_mfi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* macd */
/* Type: indicator */
/* Input arrays: 1    Options: 3    Output arrays: 3 */
/* Inputs: [series] */
/* Options: [short period, long period, signal period] */
/* Outputs: [macd, macd_signal, macd_histogram] */
DLLEXPORT extern int ti_macd_start(TI_REAL const *options);
DLLEXPORT extern int ti_macd(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* nvi */
/* Type: indicator */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: none */
/* Outputs: [nvi] */
DLLEXPORT extern int ti_nvi_start(TI_REAL const *options);
DLLEXPORT extern int ti_nvi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* obv */
/* Type: indicator */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: none */
/* Outputs: [obv] */
DLLEXPORT extern int ti_obv_start(TI_REAL const *options);
DLLEXPORT extern int ti_obv(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ppo */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [short period, long period] */
/* Outputs: [ppo] */
DLLEXPORT extern int ti_ppo_start(TI_REAL const *options);
DLLEXPORT extern int ti_ppo(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* pfe */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, ema_period] */
/* Outputs: [pfe] */
DLLEXPORT extern int ti_pfe_start(TI_REAL const *options);
DLLEXPORT extern int ti_pfe(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pfe_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pfe_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_pfe_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_pfe_stream_free(ti_stream *stream);

/* pvi */
/* Type: indicator */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: none */
/* Outputs: [pvi] */
DLLEXPORT extern int ti_pvi_start(TI_REAL const *options);
DLLEXPORT extern int ti_pvi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* posc */
/* Type: indicator */
/* Input arrays: 3    Options: 2    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period, ema_period] */
/* Outputs: [posc] */
DLLEXPORT extern int ti_posc_start(TI_REAL const *options);
DLLEXPORT extern int ti_posc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_posc_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_posc_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_posc_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_posc_stream_free(ti_stream *stream);

/* qstick */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [open, close] */
/* Options: [period] */
/* Outputs: [qstick] */
DLLEXPORT extern int ti_qstick_start(TI_REAL const *options);
DLLEXPORT extern int ti_qstick(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* rsi */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [rsi] */
DLLEXPORT extern int ti_rsi_start(TI_REAL const *options);
DLLEXPORT extern int ti_rsi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* tsi */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [y_period, z_period] */
/* Outputs: [tsi] */
DLLEXPORT extern int ti_tsi_start(TI_REAL const *options);
DLLEXPORT extern int ti_tsi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_tsi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_tsi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_tsi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_tsi_stream_free(ti_stream *stream);

/* rmi */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period, lookback_period] */
/* Outputs: [rmi] */
DLLEXPORT extern int ti_rmi_start(TI_REAL const *options);
DLLEXPORT extern int ti_rmi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_rmi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_rmi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_rmi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_rmi_stream_free(ti_stream *stream);

/* rvi */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [ema_period, stddev_period] */
/* Outputs: [rvi] */
DLLEXPORT extern int ti_rvi_start(TI_REAL const *options);
DLLEXPORT extern int ti_rvi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_rvi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_rvi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_rvi_stream_free(ti_stream *stream);

/* smi */
/* Type: indicator */
/* Input arrays: 3    Options: 3    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [q_period, r_period, s_period] */
/* Outputs: [smi] */
DLLEXPORT extern int ti_smi_start(TI_REAL const *options);
DLLEXPORT extern int ti_smi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_smi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_smi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_smi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_smi_stream_free(ti_stream *stream);

/* stoch */
/* Type: indicator */
/* Input arrays: 3    Options: 3    Output arrays: 2 */
/* Inputs: [high, low, close] */
/* Options: [k period, k slowing period, d period] */
/* Outputs: [stoch_k, stoch_d] */
DLLEXPORT extern int ti_stoch_start(TI_REAL const *options);
DLLEXPORT extern int ti_stoch(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* stochrsi */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [stochrsi] */
DLLEXPORT extern int ti_stochrsi_start(TI_REAL const *options);
DLLEXPORT extern int ti_stochrsi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* trix */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [trix] */
DLLEXPORT extern int ti_trix_start(TI_REAL const *options);
DLLEXPORT extern int ti_trix(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* wad */
/* Type: indicator */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: none */
/* Outputs: [wad] */
DLLEXPORT extern int ti_wad_start(TI_REAL const *options);
DLLEXPORT extern int ti_wad(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* willr */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [willr] */
DLLEXPORT extern int ti_willr_start(TI_REAL const *options);
DLLEXPORT extern int ti_willr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ultosc */
/* Type: indicator */
/* Input arrays: 3    Options: 3    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [short period, medium period, long period] */
/* Outputs: [ultosc] */
DLLEXPORT extern int ti_ultosc_start(TI_REAL const *options);
DLLEXPORT extern int ti_ultosc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vhf */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [vhf] */
DLLEXPORT extern int ti_vhf_start(TI_REAL const *options);
DLLEXPORT extern int ti_vhf(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vosc */
/* Type: indicator */
/* Input arrays: 1    Options: 2    Output arrays: 1 */
/* Inputs: [volume] */
/* Options: [short period, long period] */
/* Outputs: [vosc] */
DLLEXPORT extern int ti_vosc_start(TI_REAL const *options);
DLLEXPORT extern int ti_vosc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* er */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [er] */
DLLEXPORT extern int ti_er_start(TI_REAL const *options);
DLLEXPORT extern int ti_er(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_er_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_er_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_er_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_er_stream_free(ti_stream *stream);

/* pvt */
/* Type: indicator */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [close, volume] */
/* Options: none */
/* Outputs: [pvt] */
DLLEXPORT extern int ti_pvt_start(TI_REAL const *options);
DLLEXPORT extern int ti_pvt(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pvt_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_pvt_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_pvt_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_pvt_stream_free(ti_stream *stream);

/* hurst */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 2 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [hurst, fractal_dim] */
DLLEXPORT extern int ti_hurst_start(TI_REAL const *options);
DLLEXPORT extern int ti_hurst(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hurst_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_hurst_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_hurst_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_hurst_stream_free(ti_stream *stream);

/* arsi */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [cycpart] */
/* Outputs: [arsi] */
DLLEXPORT extern int ti_arsi_start(TI_REAL const *options);
DLLEXPORT extern int ti_arsi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_arsi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_arsi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_arsi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_arsi_stream_free(ti_stream *stream);

/* dm */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 2 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [plus_dm, minus_dm] */
DLLEXPORT extern int ti_dm_start(TI_REAL const *options);
DLLEXPORT extern int ti_dm(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* dx */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [dx] */
DLLEXPORT extern int ti_dx_start(TI_REAL const *options);
DLLEXPORT extern int ti_dx(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* di */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 2 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [plus_di, minus_di] */
DLLEXPORT extern int ti_di_start(TI_REAL const *options);
DLLEXPORT extern int ti_di(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* adx */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [adx] */
DLLEXPORT extern int ti_adx_start(TI_REAL const *options);
DLLEXPORT extern int ti_adx(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* adxr */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [adxr] */
DLLEXPORT extern int ti_adxr_start(TI_REAL const *options);
DLLEXPORT extern int ti_adxr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* msw */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 2 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [msw_sine, msw_lead] */
DLLEXPORT extern int ti_msw_start(TI_REAL const *options);
DLLEXPORT extern int ti_msw(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* mom */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [mom] */
DLLEXPORT extern int ti_mom_start(TI_REAL const *options);
DLLEXPORT extern int ti_mom(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* roc */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [roc] */
DLLEXPORT extern int ti_roc_start(TI_REAL const *options);
DLLEXPORT extern int ti_roc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* rocr */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [rocr] */
DLLEXPORT extern int ti_rocr_start(TI_REAL const *options);
DLLEXPORT extern int ti_rocr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* lag */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [lag] */
DLLEXPORT extern int ti_lag_start(TI_REAL const *options);
DLLEXPORT extern int ti_lag(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* max */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [max] */
DLLEXPORT extern int ti_max_start(TI_REAL const *options);
DLLEXPORT extern int ti_max(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_max_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* min */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [min] */
DLLEXPORT extern int ti_min_start(TI_REAL const *options);
DLLEXPORT extern int ti_min(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_min_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* sum */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [sum] */
DLLEXPORT extern int ti_sum_start(TI_REAL const *options);
DLLEXPORT extern int ti_sum(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* stddev */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [stddev] */
DLLEXPORT extern int ti_stddev_start(TI_REAL const *options);
DLLEXPORT extern int ti_stddev(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* stderr */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [stderr] */
DLLEXPORT extern int ti_stderr_start(TI_REAL const *options);
DLLEXPORT extern int ti_stderr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* md */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [md] */
DLLEXPORT extern int ti_md_start(TI_REAL const *options);
DLLEXPORT extern int ti_md(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* var */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [var] */
DLLEXPORT extern int ti_var_start(TI_REAL const *options);
DLLEXPORT extern int ti_var(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* avgprice */
/* Type: overlay */
/* Input arrays: 4    Options: 0    Output arrays: 1 */
/* Inputs: [open, high, low, close] */
/* Options: none */
/* Outputs: [avgprice] */
DLLEXPORT extern int ti_avgprice_start(TI_REAL const *options);
DLLEXPORT extern int ti_avgprice(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* medprice */
/* Type: overlay */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: none */
/* Outputs: [medprice] */
DLLEXPORT extern int ti_medprice_start(TI_REAL const *options);
DLLEXPORT extern int ti_medprice(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* typprice */
/* Type: overlay */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: none */
/* Outputs: [typprice] */
DLLEXPORT extern int ti_typprice_start(TI_REAL const *options);
DLLEXPORT extern int ti_typprice(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* wcprice */
/* Type: overlay */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: none */
/* Outputs: [wcprice] */
DLLEXPORT extern int ti_wcprice_start(TI_REAL const *options);
DLLEXPORT extern int ti_wcprice(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* atr */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [atr] */
DLLEXPORT extern int ti_atr_start(TI_REAL const *options);
DLLEXPORT extern int ti_atr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_atr_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_atr_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_atr_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_atr_stream_free(ti_stream *stream);

/* ce */
/* Type: indicator */
/* Input arrays: 3    Options: 2    Output arrays: 2 */
/* Inputs: [high, low, close] */
/* Options: [period, coef] */
/* Outputs: [ce_high, ce_low] */
DLLEXPORT extern int ti_ce_start(TI_REAL const *options);
DLLEXPORT extern int ti_ce(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ce_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ce_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_ce_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_ce_stream_free(ti_stream *stream);

/* natr */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [natr] */
DLLEXPORT extern int ti_natr_start(TI_REAL const *options);
DLLEXPORT extern int ti_natr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* tr */
/* Type: indicator */
/* Input arrays: 3    Options: 0    Output arrays: 1 */
/* Inputs: [high, low, close] */
/* Options: none */
/* Outputs: [tr] */
DLLEXPORT extern int ti_tr_start(TI_REAL const *options);
DLLEXPORT extern int ti_tr(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ichi */
/* Type: indicator */
/* Input arrays: 2    Options: 3    Output arrays: 4 */
/* Inputs: [high, low] */
/* Options: [period9, period26, period52] */
/* Outputs: [ichi_tenkan_sen, ichi_kijun_sen, ichi_senkou_span_A, ichi_senkou_span_B] */
DLLEXPORT extern int ti_ichi_start(TI_REAL const *options);
DLLEXPORT extern int ti_ichi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ichi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_ichi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_ichi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_ichi_stream_free(ti_stream *stream);

/* volatility */
/* Type: indicator */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [volatility] */
DLLEXPORT extern int ti_volatility_start(TI_REAL const *options);
DLLEXPORT extern int ti_volatility(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* cvi */
/* Type: indicator */
/* Input arrays: 2    Options: 1    Output arrays: 1 */
/* Inputs: [high, low] */
/* Options: [period] */
/* Outputs: [cvi] */
DLLEXPORT extern int ti_cvi_start(TI_REAL const *options);
DLLEXPORT extern int ti_cvi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* crossany */
/* Type: math */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [crossany] */
DLLEXPORT extern int ti_crossany_start(TI_REAL const *options);
DLLEXPORT extern int ti_crossany(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* crossover */
/* Type: math */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [crossover] */
DLLEXPORT extern int ti_crossover_start(TI_REAL const *options);
DLLEXPORT extern int ti_crossover(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* decay */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [decay] */
DLLEXPORT extern int ti_decay_start(TI_REAL const *options);
DLLEXPORT extern int ti_decay(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* edecay */
/* Type: math */
/* Input arrays: 1    Options: 1    Output arrays: 1 */
/* Inputs: [series] */
/* Options: [period] */
/* Outputs: [edecay] */
DLLEXPORT extern int ti_edecay_start(TI_REAL const *options);
DLLEXPORT extern int ti_edecay(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* add */
/* Type: simple */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [add] */
DLLEXPORT extern int ti_add_start(TI_REAL const *options);
DLLEXPORT extern int ti_add(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* sub */
/* Type: simple */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [sub] */
DLLEXPORT extern int ti_sub_start(TI_REAL const *options);
DLLEXPORT extern int ti_sub(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* mul */
/* Type: simple */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [mul] */
DLLEXPORT extern int ti_mul_start(TI_REAL const *options);
DLLEXPORT extern int ti_mul(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* div */
/* Type: simple */
/* Input arrays: 2    Options: 0    Output arrays: 1 */
/* Inputs: [series, series] */
/* Options: none */
/* Outputs: [div] */
DLLEXPORT extern int ti_div_start(TI_REAL const *options);
DLLEXPORT extern int ti_div(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* abs */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [abs] */
DLLEXPORT extern int ti_abs_start(TI_REAL const *options);
DLLEXPORT extern int ti_abs(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* acos */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [acos] */
DLLEXPORT extern int ti_acos_start(TI_REAL const *options);
DLLEXPORT extern int ti_acos(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* asin */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [asin] */
DLLEXPORT extern int ti_asin_start(TI_REAL const *options);
DLLEXPORT extern int ti_asin(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* atan */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [atan] */
DLLEXPORT extern int ti_atan_start(TI_REAL const *options);
DLLEXPORT extern int ti_atan(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ceil */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [ceil] */
DLLEXPORT extern int ti_ceil_start(TI_REAL const *options);
DLLEXPORT extern int ti_ceil(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* cos */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [cos] */
DLLEXPORT extern int ti_cos_start(TI_REAL const *options);
DLLEXPORT extern int ti_cos(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* cosh */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [cosh] */
DLLEXPORT extern int ti_cosh_start(TI_REAL const *options);
DLLEXPORT extern int ti_cosh(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* exp */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [exp] */
DLLEXPORT extern int ti_exp_start(TI_REAL const *options);
DLLEXPORT extern int ti_exp(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* floor */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [floor] */
DLLEXPORT extern int ti_floor_start(TI_REAL const *options);
DLLEXPORT extern int ti_floor(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* ln */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [ln] */
DLLEXPORT extern int ti_ln_start(TI_REAL const *options);
DLLEXPORT extern int ti_ln(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* log10 */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [log10] */
DLLEXPORT extern int ti_log10_start(TI_REAL const *options);
DLLEXPORT extern int ti_log10(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* round */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [round] */
DLLEXPORT extern int ti_round_start(TI_REAL const *options);
DLLEXPORT extern int ti_round(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* sin */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [sin] */
DLLEXPORT extern int ti_sin_start(TI_REAL const *options);
DLLEXPORT extern int ti_sin(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* sinh */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [sinh] */
DLLEXPORT extern int ti_sinh_start(TI_REAL const *options);
DLLEXPORT extern int ti_sinh(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* sqrt */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [sqrt] */
DLLEXPORT extern int ti_sqrt_start(TI_REAL const *options);
DLLEXPORT extern int ti_sqrt(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* tan */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [tan] */
DLLEXPORT extern int ti_tan_start(TI_REAL const *options);
DLLEXPORT extern int ti_tan(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* tanh */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [tanh] */
DLLEXPORT extern int ti_tanh_start(TI_REAL const *options);
DLLEXPORT extern int ti_tanh(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* todeg */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [degrees] */
DLLEXPORT extern int ti_todeg_start(TI_REAL const *options);
DLLEXPORT extern int ti_todeg(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* torad */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [radians] */
DLLEXPORT extern int ti_torad_start(TI_REAL const *options);
DLLEXPORT extern int ti_torad(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* trunc */
/* Type: simple */
/* Input arrays: 1    Options: 0    Output arrays: 1 */
/* Inputs: [series] */
/* Options: none */
/* Outputs: [trunc] */
DLLEXPORT extern int ti_trunc_start(TI_REAL const *options);
DLLEXPORT extern int ti_trunc(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);

/* vi */
/* Type: indicator */
/* Input arrays: 3    Options: 1    Output arrays: 2 */
/* Inputs: [high, low, close] */
/* Options: [period] */
/* Outputs: [vi_p, vi_m] */
DLLEXPORT extern int ti_vi_start(TI_REAL const *options);
DLLEXPORT extern int ti_vi(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_vi_ref(int size, TI_REAL const *const *inputs, TI_REAL const *options, TI_REAL *const *outputs);
DLLEXPORT extern int ti_vi_stream_new(TI_REAL const *options, ti_stream **stream);
DLLEXPORT extern int ti_vi_stream_run(ti_stream *stream, int size, TI_REAL const *const *inputs, TI_REAL *const *outputs);
DLLEXPORT extern void ti_vi_stream_free(ti_stream *stream);

enum {TI_INDICATOR_ABANDS_INDEX, TI_INDICATOR_ABS_INDEX, TI_INDICATOR_ACOS_INDEX, TI_INDICATOR_AD_INDEX, TI_INDICATOR_ADD_INDEX, TI_INDICATOR_ADOSC_INDEX, TI_INDICATOR_ADX_INDEX, TI_INDICATOR_ADXR_INDEX, TI_INDICATOR_AHMA_INDEX, TI_INDICATOR_AO_INDEX, TI_INDICATOR_APO_INDEX, TI_INDICATOR_AROON_INDEX, TI_INDICATOR_AROONOSC_INDEX, TI_INDICATOR_ARSI_INDEX, TI_INDICATOR_ASIN_INDEX, TI_INDICATOR_ATAN_INDEX, TI_INDICATOR_ATR_INDEX, TI_INDICATOR_AVGPRICE_INDEX, TI_INDICATOR_BBANDS_INDEX, TI_INDICATOR_BF2_INDEX, TI_INDICATOR_BF3_INDEX, TI_INDICATOR_BOP_INDEX, TI_INDICATOR_CCI_INDEX, TI_INDICATOR_CE_INDEX, TI_INDICATOR_CEIL_INDEX, TI_INDICATOR_CMF_INDEX, TI_INDICATOR_CMI_INDEX, TI_INDICATOR_CMO_INDEX, TI_INDICATOR_COPP_INDEX, TI_INDICATOR_COS_INDEX, TI_INDICATOR_COSH_INDEX, TI_INDICATOR_CROSSANY_INDEX, TI_INDICATOR_CROSSOVER_INDEX, TI_INDICATOR_CVI_INDEX, TI_INDICATOR_DECAY_INDEX, TI_INDICATOR_DEMA_INDEX, TI_INDICATOR_DI_INDEX, TI_INDICATOR_DIV_INDEX, TI_INDICATOR_DM_INDEX, TI_INDICATOR_DPO_INDEX, TI_INDICATOR_DWMA_INDEX, TI_INDICATOR_DX_INDEX, TI_INDICATOR_EDCF_INDEX, TI_INDICATOR_EDECAY_INDEX, TI_INDICATOR_EHMA_INDEX, TI_INDICATOR_EMA_INDEX, TI_INDICATOR_EMSD_INDEX, TI_INDICATOR_EMV_INDEX, TI_INDICATOR_ER_INDEX, TI_INDICATOR_EVWMA_INDEX, TI_INDICATOR_EXP_INDEX, TI_INDICATOR_FI_INDEX, TI_INDICATOR_FISHER_INDEX, TI_INDICATOR_FLOOR_INDEX, TI_INDICATOR_FOSC_INDEX, TI_INDICATOR_FRAMA_INDEX, TI_INDICATOR_GF1_INDEX, TI_INDICATOR_GF2_INDEX, TI_INDICATOR_GF3_INDEX, TI_INDICATOR_GF4_INDEX, TI_INDICATOR_HD_INDEX, TI_INDICATOR_HF_INDEX, TI_INDICATOR_HFEMA_INDEX, TI_INDICATOR_HFSMA_INDEX, TI_INDICATOR_HMA_INDEX, TI_INDICATOR_HURST_INDEX, TI_INDICATOR_HWMA_INDEX, TI_INDICATOR_ICHI_INDEX, TI_INDICATOR_IDWMA_INDEX, TI_INDICATOR_KAMA_INDEX, TI_INDICATOR_KC_INDEX, TI_INDICATOR_KST_INDEX, TI_INDICATOR_KVO_INDEX, TI_INDICATOR_LAG_INDEX, TI_INDICATOR_LF_INDEX, TI_INDICATOR_LINREG_INDEX, TI_INDICATOR_LINREGINTERCEPT_INDEX, TI_INDICATOR_LINREGSLOPE_INDEX, TI_INDICATOR_LMA_INDEX, TI_INDICATOR_LN_INDEX, TI_INDICATOR_LOG10_INDEX, TI_INDICATOR_MACD_INDEX, TI_INDICATOR_MAMA_INDEX, TI_INDICATOR_MARKETFI_INDEX, TI_INDICATOR_MASS_INDEX, TI_INDICATOR_MAX_INDEX, TI_INDICATOR_MD_INDEX, TI_INDICATOR_MEDPRICE_INDEX, TI_INDICATOR_MESASTOCH_INDEX, TI_INDICATOR_MFI_INDEX, TI_INDICATOR_MGDYN_INDEX, TI_INDICATOR_MHLMA_INDEX, TI_INDICATOR_MIN_INDEX, TI_INDICATOR_MOM_INDEX, TI_INDICATOR_MSW_INDEX, TI_INDICATOR_MUL_INDEX, TI_INDICATOR_NATR_INDEX, TI_INDICATOR_NVI_INDEX, TI_INDICATOR_OBV_INDEX, TI_INDICATOR_PBANDS_INDEX, TI_INDICATOR_PC_INDEX, TI_INDICATOR_PFE_INDEX, TI_INDICATOR_POSC_INDEX, TI_INDICATOR_PPO_INDEX, TI_INDICATOR_PSAR_INDEX, TI_INDICATOR_PVI_INDEX, TI_INDICATOR_PVT_INDEX, TI_INDICATOR_PWMA_INDEX, TI_INDICATOR_QSTICK_INDEX, TI_INDICATOR_REMA_INDEX, TI_INDICATOR_RMF_INDEX, TI_INDICATOR_RMI_INDEX, TI_INDICATOR_RMTA_INDEX, TI_INDICATOR_ROC_INDEX, TI_INDICATOR_ROCR_INDEX, TI_INDICATOR_ROOF_INDEX, TI_INDICATOR_ROUND_INDEX, TI_INDICATOR_RSI_INDEX, TI_INDICATOR_RVI_INDEX, TI_INDICATOR_SHMMA_INDEX, TI_INDICATOR_SIN_INDEX, TI_INDICATOR_SINH_INDEX, TI_INDICATOR_SMA_INDEX, TI_INDICATOR_SMI_INDEX, TI_INDICATOR_SQRT_INDEX, TI_INDICATOR_SSMOOTH_INDEX, TI_INDICATOR_STDDEV_INDEX, TI_INDICATOR_STDERR_INDEX, TI_INDICATOR_STOCH_INDEX, TI_INDICATOR_STOCHRSI_INDEX, TI_INDICATOR_SUB_INDEX, TI_INDICATOR_SUM_INDEX, TI_INDICATOR_SWMA_INDEX, TI_INDICATOR_T3_INDEX, TI_INDICATOR_TAN_INDEX, TI_INDICATOR_TANH_INDEX, TI_INDICATOR_TEMA_INDEX, TI_INDICATOR_TODEG_INDEX, TI_INDICATOR_TORAD_INDEX, TI_INDICATOR_TR_INDEX, TI_INDICATOR_TRIMA_INDEX, TI_INDICATOR_TRIX_INDEX, TI_INDICATOR_TRUNC_INDEX, TI_INDICATOR_TSF_INDEX, TI_INDICATOR_TSI_INDEX, TI_INDICATOR_TYPPRICE_INDEX, TI_INDICATOR_ULTOSC_INDEX, TI_INDICATOR_VAR_INDEX, TI_INDICATOR_VHF_INDEX, TI_INDICATOR_VI_INDEX, TI_INDICATOR_VIDYA_INDEX, TI_INDICATOR_VOLATILITY_INDEX, TI_INDICATOR_VOSC_INDEX, TI_INDICATOR_VWAP_INDEX, TI_INDICATOR_VWMA_INDEX, TI_INDICATOR_WAD_INDEX, TI_INDICATOR_WCPRICE_INDEX, TI_INDICATOR_WILDERS_INDEX, TI_INDICATOR_WILLR_INDEX, TI_INDICATOR_WMA_INDEX, TI_INDICATOR_ZLEMA_INDEX};
#ifdef __cplusplus
}
#endif